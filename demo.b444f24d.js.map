{"version":3,"sources":["../src/index.js","index.js"],"names":["renderLut","options","container","document","body","blockWidth","Math","round","chunkWidth","num","row","col","ceil","canvas","HTMLCanvasElement","createElement","width","height","ctx","getContext","image","getImageData","r","g","b","x","y","floor","data","putImageData","appendChild","getElementById","innerHTML"],"mappings":";;;AA+CC,aAvCc,SAASA,IACtBC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACVC,EAAYC,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,SAASC,KAEfC,EAAaC,KAAKC,MAAMN,EAAQO,aAAe,GACvBP,EAAAA,EAAtBQ,IAAAA,OAAM,IAAA,EAAA,GAFd,EAE8BR,EAAAA,EAAZS,IAAAA,OAAM,IAAA,EAAA,EAFxB,EAGMC,EAAML,KAAKM,KAAKH,EAAMC,GAEtBG,EAASX,aAAqBY,kBAClCZ,EAAYC,SAASY,cAAc,UACrCF,EAAOG,MAAQX,EAAaM,EAC5BE,EAAOI,OAASZ,EAAaK,EAErBM,IAAAA,EAAkBH,EAAlBG,MAAOC,EAAWJ,EAAXI,OACTC,EAAML,EAAOM,WAAW,MACxBC,EAAQF,EAAIG,aAAa,EAAG,EAAGL,EAAOC,GAE5B,EAAA,GAAXK,EAdL,EAAA,GAcQC,EAdR,EAAA,GAcWC,EAdX,EAAA,GAeKF,IAAAA,EAAI,EAAGA,EAAIjB,EAAYiB,GAAK,EAC1BC,IAAAA,EAAI,EAAGA,EAAIlB,EAAYkB,GAAK,EAC1BC,IAAAA,EAAI,EAAGA,EAAIf,EAAKe,GAAK,EAAG,CACrBC,IAAAA,EAAIH,EAAIE,EAAIb,EAAMN,EAClBqB,EAAIH,EAAIjB,KAAKqB,MAAMH,EAAIb,GAAON,EAEpCe,EAAMQ,KAAuB,GAAjBH,EAAIC,EAAIV,IAAcM,GAAKjB,EAAa,GAAK,IACzDe,EAAMQ,KAAuB,GAAjBH,EAAIC,EAAIV,GAAa,GAAKO,GAAKlB,EAAa,GAAK,IAC7De,EAAMQ,KAAuB,GAAjBH,EAAIC,EAAIV,GAAa,GAAKQ,GAAKf,EAAM,GAAK,IACtDW,EAAMQ,KAAuB,GAAjBH,EAAIC,EAAIV,GAAa,GAAK,IAWrCH,OANPK,EAAIW,aAAaT,EAAO,EAAG,GAErBlB,aAAqBY,mBACzBZ,EAAU4B,YAAYjB,GAGjBA,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACvCD,aARA,QAAA,gBACA,IAAA,EAAA,EAAA,QAAA,iBAOA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GALAV,SAAS4B,eAAe,OAAOC,UAA/B,8DAKA,EAAU,EAAA,SAAA,CACR3B,WAAY,GACZI,IAAK,GACLC,IAAK,GACJP,SAAS4B,eAAe","file":"demo.b444f24d.js","sourceRoot":"../demo","sourcesContent":["/**\n * @param {object} options\n * @param {number} options.blockWidth The width of each color block, the default is 64 pixels\n * @param {number} options.num The number of color blocks, the default is 64\n * @param {number} options.row The number of rows of color blocks, the default is 8 rows\n * @param {HTMLElement || HTMLCanvasElement} container\n * @returns {HTMLCanvasElement}\n **/\nexport default function renderLut(\n  options = {},\n  container = document.body\n) {\n  const blockWidth = Math.round(options.chunkWidth) || 64;\n  const { num = 64, row = 8 } = options;\n  const col = Math.ceil(num / row);\n\n  const canvas = container instanceof HTMLCanvasElement ?\n    container : document.createElement('canvas');\n  canvas.width = blockWidth * col;\n  canvas.height = blockWidth * row;\n\n  const { width, height } = canvas;\n  const ctx = canvas.getContext('2d');\n  const image = ctx.getImageData(0, 0, width, height);\n\n  let [r, g, b] = []\n  for (r = 0; r < blockWidth; r += 1) {\n    for (g = 0; g < blockWidth; g += 1) {\n      for (b = 0; b < num; b += 1) {\n        const x = r + b % col * blockWidth;\n        const y = g + Math.floor(b / col) * blockWidth;\n\n        image.data[(x + y * width) * 4] = r / (blockWidth - 1) * 255;\n        image.data[(x + y * width) * 4 + 1] = g / (blockWidth - 1) * 255;\n        image.data[(x + y * width) * 4 + 2] = b / (num - 1) * 255;\n        image.data[(x + y * width) * 4 + 3] = 255;\n      }\n    }\n  }\n\n  ctx.putImageData(image, 0, 0)\n\n  if (!(container instanceof HTMLCanvasElement)) {\n    container.appendChild(canvas);\n  }\n\n  return canvas\n};\n","import './styles.css';\nimport renderLut from '../src/index';\n\ndocument.getElementById('app').innerHTML = `\n  <h1>Look Up Table</h1>\n  <canvas id=\"lut\"></canvas>\n`;\n\nrenderLut({\n  blockWidth: 64,\n  num: 64,\n  row: 8,\n}, document.getElementById('lut'));\n"]}